#VRML V2.0 utf8
#####################################################################
#
# Geometry derived from tinMan.wrl,
# Copyright (c) 1996 Tientien Li. All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software
# for NON-COMMERCIAL or COMMERCIAL purposes and without fee is
# hereby granted.
#
#####################################################################
#
# Motions Copyright (c) 1997 Andreas Butz, DFKI. All Rights Reserved.
#
#####################################################################
# General Setup
#####################################################################

WorldInfo { 
	info  "Hierarchical motion demo"
	title "Hierarchical motion demo"
}

NavigationInfo {
	headlight	TRUE
	type		"EXAMINE"
}

#####################################################################
# Body geometry
#####################################################################

DEF VIEW_INITIAL Viewpoint {
	position    0 0.75 2.5
	orientation 1 0 0 -0.25
	fieldOfView 0.7
	jump        TRUE
	description "Initial view at Persona"
}

DEF GEOMETRY_MAN Transform {
	translation 0 0 0
	children [
		DEF VIEW_SHOULDER Viewpoint {
			position    0.35 0.5 -1
			orientation 0 1 0 3.14
			fieldOfView 0.785398
			jump        TRUE
			description "View over the shoulder of Persona 3D"
		}

		DEF VIEW_FACE Viewpoint {
			position    0 0.5 2.5
			orientation 0 1 0 0
			fieldOfView 0.25
			jump        TRUE
			description "View at the face of Persona 3D"
		}

		DEF TOUCH_MAN TouchSensor { }

		DEF GEOMETRY_HEAD Transform {
			translation 0 0.45 0
			children [
				DEF TOUCH_HEAD TouchSensor { }
				
				DEF GEOMETRY_SKULL Transform {
					children [
						DEF TOUCH_SKULL TouchSensor { }
						Shape {
							appearance Appearance 
							{ material Material { diffuseColor 0.88 0.74 0.59 } }
							geometry Sphere { radius 0.2 }
						}
					]
				}

				DEF GEOMETRY_NOSE Transform {
					translation 0 -0.02 0.2
					rotation    1 0 0 1.57
					children [
						DEF TOUCH_NOSE TouchSensor { }
						Shape {
							appearance Appearance 
							{ material Material { diffuseColor 0.88 0.74 0.59 } }
							geometry Cone { height 0.1 bottomRadius 0.05 }
						}
					]
				}
				DEF GEOMETRY_HAT Transform {
					translation 0 0.25 -0.2
					rotation    1 0 0 -0.7
					children [
						DEF TOUCH_HAT TouchSensor { }
						Shape {
							appearance Appearance 
							{ material Material { diffuseColor 0.03 0.8 0.20 } }
							geometry Cone { height 0.5 bottomRadius 0.2 }
						}
					]
				}
				DEF GEOMETRY_MOUTH Transform {
					translation 0 -0.1 0.17
					rotation    0 0 1 1.57
					children [
						DEF TOUCH_MOUTH TouchSensor { }
						
						DEF MOUTH_LEFT Transform {
							translation 0 -0.04 0
							rotation    0 0 1 0.2
							children [
								Shape {
								appearance Appearance 
								{ material Material { diffuseColor 1 0 0 } }
								geometry Cylinder { height 0.1 radius 0.02 } }
							]
						}
						DEF MOUTH_RIGHT Transform {
							translation 0 0.04 0
							rotation    0 0 1 -0.2
							children [
								Shape {
								appearance Appearance 
								{ material Material { diffuseColor 1 0 0 } }
								geometry Cylinder { height 0.1 radius 0.02 } }
							]
						}
					]
				}
				DEF GEOMETRY_RIGHT_EYE Transform {
					translation -0.08 0.05 0.15
					children [
						DEF TOUCH_RIGHT_EYE TouchSensor { }
						Shape {
							appearance Appearance 
							{ material 
							DEF RIGHT_EYE_MATERIAL 
							Material { diffuseColor 1 1 1 } }
							geometry Sphere { radius 0.04 }
						}
					]
				}
				DEF GEOMETRY_LEFT_EYE Transform {
					translation 0.08 0.05 0.15
					children [
						DEF TOUCH_LEFT_EYE TouchSensor { }
						Shape {
							appearance Appearance 
							{ material 
							DEF LEFT_EYE_MATERIAL 
							Material { diffuseColor 1 1 1 } }
							geometry Sphere { radius 0.04 }
						}
					]
				}
			]
		}
	
		DEF GEOMETRY_BODY Transform {
		children [
			DEF TOUCH_BODY TouchSensor { }
			Shape {
				appearance Appearance 
				{ material Material { diffuseColor 0.4 0.4 1.0 } }
				geometry Cylinder { height 0.5 radius 0.2 }
			}
			]
		}

		DEF GEOMETRY_LEFT_ARM Transform {
			translation 0.25 0.0 0.0
			rotation 1 0 0 0.0
			center 0.0 0.2 0.0
			children [
				DEF TOUCH_LEFT_ARM TouchSensor { }
				Shape {
					appearance Appearance 
					{ material Material { diffuseColor 0.88 0.74 0.59 } }
					geometry Cylinder { height 0.5 radius 0.08 }
				}
			]
		}

		DEF GEOMETRY_RIGHT_ARM Transform {
			translation -0.25 0.0 0.0
			rotation 1 0 0 0.0
			center 0.0 0.2 0.0
			children [
				DEF TOUCH_RIGHT_ARM TouchSensor { }
				Shape {
				appearance Appearance 
				{ material Material { diffuseColor 0.88 0.74 0.59 } }
				geometry Cylinder { height 0.5 radius 0.08 }
				}
			]
		}

		DEF GEOMETRY_LEFT_LEG Transform {
			translation 0.1 -0.5 0.0
			rotation 1 0 0 -0.0
			center 0.0 0.2 0.0
			children [
				DEF TOUCH_LEFT_LEG TouchSensor { }
				Shape {
					appearance Appearance 
					{ material Material { diffuseColor 0.4 0.4 1.0 } }
					geometry Cylinder { height 0.5 radius 0.1 }
				}
			]
		}

		DEF GEOMETRY_RIGHT_LEG Transform {
			translation -0.1 -0.5 0.0
			rotation 1 0 0 0.0
			center 0.0 0.2 0.0
			children [
				DEF TOUCH_RIGHT_LEG TouchSensor { }
				Shape {
					appearance Appearance 
					{ material Material { diffuseColor 0.4 0.4 1.0 } }
					geometry Cylinder { height 0.5 radius 0.1 }
				}
			]
		}
	]
}

#####################################################################
# Motion Descriptions (not supported by three.js)
# https://tecfa.unige.ch/guides/vrml/vrmlman/node22.html
#####################################################################

# @changkun: The following animation is not supported by three.js yet.
# Thus it is commented out.

# Wave the left arm

# DEF WAVE_LEFT_ARM_TIME_SENSOR TimeSensor{
# 	loop FALSE
# 	cycleInterval 3.0 # seconds
# }

# DEF WAVE_LEFT_ARM_ORIENTATION OrientationInterpolator {
# 	key [0.0 0.1 0.2 
# 		0.3 0.4 0.5 
# 		0.6 0.7 0.8
# 		0.9 1.0]
# 	keyValue [0 0 1 0.0  0 0 1 1.5  0 0 1 3.0
# 			0 0 1 3.2  0 0 1 2.8  0 0 1 3.2
# 			0 0 1 2.8  0 0 1 3.2
# 			0 0 1 2.8  0 0 1 1.5  0 0 1 0.0 ]
# }

# ROUTE WAVE_LEFT_ARM_TIME_SENSOR.fraction_changed TO WAVE_LEFT_ARM_ORIENTATION.set_fraction
# ROUTE WAVE_LEFT_ARM_ORIENTATION.value_changed TO GEOMETRY_LEFT_ARM.set_rotation

# # Wave the right arm

# DEF WAVE_RIGHT_ARM_TIME_SENSOR TimeSensor{
# 	loop FALSE
# 	cycleInterval 3.0
# }

# DEF WAVE_RIGHT_ARM_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.1 0.2 
# 		0.3 0.4 0.5 
# 		0.6 0.7 0.8
# 		0.9 1.0]
# 	keyValue [0 0 1 0.0  0 0 1 -1.5  0 0 1 -3.0
# 			0 0 1 -3.2  0 0 1 -2.8  0 0 1 -3.2
# 			0 0 1 -2.8  0 0 1 -3.2
# 			0 0 1 -2.8  0 0 1 -1.5  0 0 1 0.0 ]
# }

# ROUTE WAVE_RIGHT_ARM_TIME_SENSOR.fraction_changed TO WAVE_RIGHT_ARM_ORIENTATION.set_fraction
# ROUTE WAVE_RIGHT_ARM_ORIENTATION.value_changed TO GEOMETRY_RIGHT_ARM.set_rotation

# # blink the left eye

# DEF BLINK_LEFT_EYE_TIME_SENSOR TimeSensor{
# 	loop FALSE
# 	cycleInterval 0.5
# }

# DEF BLINK_LEFT_EYE_COLOR ColorInterpolator {
# 	key [0.0 0.1 0.9 1.0] 
# 	keyValue [ 1 1 1  0.88 0.74 0.59  0.88 0.74 0.59  1 1 1 ]
# }

# ROUTE BLINK_LEFT_EYE_TIME_SENSOR.fraction_changed TO BLINK_LEFT_EYE_COLOR.set_fraction
# ROUTE BLINK_LEFT_EYE_COLOR.value_changed TO LEFT_EYE_MATERIAL.set_diffuseColor

# # blink the right eye

# DEF BLINK_RIGHT_EYE_TIME_SENSOR TimeSensor{
# 	loop FALSE
# 	cycleInterval 0.5
# }

# DEF BLINK_RIGHT_EYE_COLOR ColorInterpolator {
# 	key [0.0 0.1 0.9 1.0] 
# 	keyValue [ 1 1 1  0.88 0.74 0.59  0.88 0.74 0.59  1 1 1 ]
# }

# ROUTE BLINK_RIGHT_EYE_TIME_SENSOR.fraction_changed TO BLINK_RIGHT_EYE_COLOR.set_fraction
# ROUTE BLINK_RIGHT_EYE_COLOR.value_changed TO RIGHT_EYE_MATERIAL.set_diffuseColor

# # smile

# DEF SMILE_TIME_SENSOR TimeSensor{
#    loop FALSE
#    cycleInterval 2.0
# }

# DEF SMILE_MOUTH_LEFT_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.3 0.8 1.0]
# 	keyValue [ 0 0 1 0.2  0 0 1 0.4  0 0 1 0.5  0 0 1 0.2 ]
# }

# ROUTE SMILE_TIME_SENSOR.fraction_changed TO SMILE_MOUTH_LEFT_ORIENTATION.set_fraction
# ROUTE SMILE_MOUTH_LEFT_ORIENTATION.value_changed TO MOUTH_LEFT.set_rotation

# DEF SMILE_MOUTH_RIGHT_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.3 0.8 1.0]
# 	keyValue [ 0 0 1 -0.2  0 0 1 -0.4  0 0 1 -0.5  0 0 1 -0.2 ]
# }

# ROUTE SMILE_TIME_SENSOR.fraction_changed TO SMILE_MOUTH_RIGHT_ORIENTATION.set_fraction
# ROUTE SMILE_MOUTH_RIGHT_ORIENTATION.value_changed TO MOUTH_RIGHT.set_rotation


# # unsmile

# DEF UNSMILE_TIME_SENSOR TimeSensor{
# 	loop FALSE
# 	cycleInterval 2.0
# }

# DEF UNSMILE_MOUTH_LEFT_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.3 0.8 1.0]
# 	keyValue [ 0 0 1 0.2  0 0 1 -0.1  0 0 1 -0.2  0 0 1 0.2 ]
# }

# ROUTE UNSMILE_TIME_SENSOR.fraction_changed TO UNSMILE_MOUTH_LEFT_ORIENTATION.set_fraction
# ROUTE UNSMILE_MOUTH_LEFT_ORIENTATION.value_changed TO MOUTH_LEFT.set_rotation

# DEF UNSMILE_MOUTH_RIGHT_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.3 0.8 1.0]
# 	keyValue [ 0 0 1 -0.2  0 0 1 0.1  0 0 1 0.2  0 0 1 -0.2 ]
# }

# ROUTE UNSMILE_TIME_SENSOR.fraction_changed TO UNSMILE_MOUTH_RIGHT_ORIENTATION.set_fraction
# ROUTE UNSMILE_MOUTH_RIGHT_ORIENTATION.value_changed TO MOUTH_RIGHT.set_rotation


# # nod the head: YES

# DEF NOD_HEAD_TIME_SENSOR TimeSensor{
# 	loop FALSE
# 	cycleInterval 2.0
# }

# DEF NOD_HEAD_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.2 
# 			0.4 0.6 
# 			0.8 1.0]
# 	keyValue [ 1 0 0 0.0  1 0 0 -0.1
# 			1 0 0 0.4  1 0 0 -0.1
# 			1 0 0 0.4  1 0 0 0.0 ]
# }

# ROUTE NOD_HEAD_TIME_SENSOR.fraction_changed TO NOD_HEAD_ORIENTATION.set_fraction
# ROUTE NOD_HEAD_ORIENTATION.value_changed TO GEOMETRY_HEAD.set_rotation

# # shake the head: NO

# DEF SHAKE_HEAD_TIME_SENSOR TimeSensor{
# 	loop FALSE
# 	cycleInterval 2.0
# }

# DEF SHAKE_HEAD_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.2 
# 			0.4 0.6 
# 			0.8 1.0]
# 	keyValue [ 0 1 0 0.0  0 1 0 -0.5
# 			0 1 0 0.5  0 1 0 -0.5
# 			0 1 0 0.5  0 1 0 0.0 ]
# }

# ROUTE SHAKE_HEAD_TIME_SENSOR.fraction_changed TO SHAKE_HEAD_ORIENTATION.set_fraction
# ROUTE SHAKE_HEAD_ORIENTATION.value_changed TO GEOMETRY_HEAD.set_rotation
# ROUTE SHAKE_HEAD_TIME_SENSOR.isActive TO VIEW_FACE.set_bind 

# # jump into the air

# DEF JUMP_TIME_SENSOR TimeSensor{
# 	loop FALSE
# 	cycleInterval 2.0
# }

# DEF JUMP_TRANSLATION PositionInterpolator { 
# 	key [0.0 0.1 0.2 
# 		0.3 0.5 0.7 
# 		0.8 0.9 1.0]
# 	keyValue [0.0 0.0 0.0  0.0 -0.1 0.0  0.0 0.0 0.0
# 			0.0 0.4 0.0  0.0 0.6 0.0  0.0 0.4 0.0
# 			0.0 0.0 0.0  0.0 -0.1 0.0  0.0 0.0 0.0]
# }

# ROUTE JUMP_TIME_SENSOR.fraction_changed TO JUMP_TRANSLATION.set_fraction
# ROUTE JUMP_TRANSLATION.value_changed TO GEOMETRY_MAN.set_translation

# # make a step

# DEF STEP_TIME_SENSOR TimeSensor{
# 	loop FALSE
# 	cycleInterval 2.0
# }

# DEF STEP_MAN_TRANSLATION PositionInterpolator { 
# 	key [0.0 0.25 0.5 0.75 1.0 ]
# 	keyValue [0.0 0.0 0.0  0.0 -0.1 0.0  0.0 0.0 0.0
# 			0.0 -0.1 0.0  0.0 0.0 0.0]
# }

# ROUTE STEP_TIME_SENSOR.fraction_changed TO STEP_MAN_TRANSLATION.set_fraction
# ROUTE STEP_MAN_TRANSLATION.value_changed TO GEOMETRY_MAN.set_translation

# DEF STEP_RIGHT_LEG_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.25 0.5 0.75 1.0 ]
# 	keyValue [1 0 0 0.0  1 0 0 -0.7  1 0 0 0.0  1 0 0 0.7  1 0 0 0.0]
# }

# ROUTE STEP_TIME_SENSOR.fraction_changed TO STEP_RIGHT_LEG_ORIENTATION.set_fraction
# ROUTE STEP_RIGHT_LEG_ORIENTATION.value_changed TO GEOMETRY_RIGHT_LEG.set_rotation

# DEF STEP_LEFT_LEG_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.25 0.5 0.75 1.0 ]
# 	keyValue [1 0 0 0.0  1 0 0 0.7  1 0 0 0.0  1 0 0 -0.7  1 0 0 0.0]
# }

# ROUTE STEP_TIME_SENSOR.fraction_changed TO STEP_LEFT_LEG_ORIENTATION.set_fraction
# ROUTE STEP_LEFT_LEG_ORIENTATION.value_changed TO GEOMETRY_LEFT_LEG.set_rotation

# DEF STEP_RIGHT_ARM_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.25 0.5 0.75 1.0 ]
# 	keyValue [1 0 0 0.0  1 0 0 0.7  1 0 0 0.0  1 0 0 -0.7  1 0 0 0.0]
# }

# ROUTE STEP_TIME_SENSOR.fraction_changed TO STEP_RIGHT_ARM_ORIENTATION.set_fraction
# ROUTE STEP_RIGHT_ARM_ORIENTATION.value_changed TO GEOMETRY_RIGHT_ARM.set_rotation

# DEF STEP_LEFT_ARM_ORIENTATION OrientationInterpolator { 
# 	key [0.0 0.25 0.5 0.75 1.0 ]
# 	keyValue [1 0 0 0.0  1 0 0 -0.7  1 0 0 0.0  1 0 0 0.7  1 0 0 0.0]
# }

# ROUTE STEP_TIME_SENSOR.fraction_changed TO STEP_LEFT_ARM_ORIENTATION.set_fraction
# ROUTE STEP_LEFT_ARM_ORIENTATION.value_changed TO GEOMETRY_LEFT_ARM.set_rotation

# #####################################################################
# # Behaviour Descriptions 
# #####################################################################

# DEF BLINK_EYES TimeSensor {}
# ROUTE BLINK_EYES.cycleTime TO BLINK_LEFT_EYE_TIME_SENSOR.startTime
# ROUTE BLINK_EYES.cycleTime TO BLINK_RIGHT_EYE_TIME_SENSOR.startTime


# DEF LOOK_FRIENDLY TimeSensor {}
# ROUTE LOOK_FRIENDLY.cycleTime TO SMILE_TIME_SENSOR.startTime
# ROUTE LOOK_FRIENDLY.cycleTime TO BLINK_EYES.startTime


# DEF LOOK_ANGRY TimeSensor {}
# ROUTE LOOK_ANGRY.cycleTime TO UNSMILE_TIME_SENSOR.startTime


# DEF SAY_YES TimeSensor {}
# ROUTE SAY_YES.cycleTime TO LOOK_FRIENDLY.startTime
# ROUTE SAY_YES.cycleTime TO NOD_HEAD_TIME_SENSOR.startTime

# DEF SAY_NO TimeSensor {}
# ROUTE SAY_NO.cycleTime TO UNSMILE_TIME_SENSOR.startTime
# ROUTE SAY_NO.cycleTime TO SHAKE_HEAD_TIME_SENSOR.startTime


# DEF JUMP TimeSensor {}
# ROUTE JUMP.cycleTime TO JUMP_TIME_SENSOR.startTime
# ROUTE JUMP.cycleTime TO BLINK_EYES.startTime


# DEF WALK TimeSensor {}
# ROUTE WALK.cycleTime TO STEP_TIME_SENSOR.startTime
# ROUTE WALK.cycleTime TO BLINK_EYES.startTime


# DEF WAVE TimeSensor {}
# ROUTE WAVE.cycleTime TO WAVE_RIGHT_ARM_TIME_SENSOR.startTime
# ROUTE WAVE.cycleTime TO WAVE_LEFT_ARM_TIME_SENSOR.startTime


# DEF JOY TimeSensor {}
# ROUTE JOY.startTime TO JUMP.startTime
# ROUTE JOY.startTime TO WAVE.startTime
# ROUTE JOY.startTime TO SMILE_TIME_SENSOR.startTime


# #####################################################################
# # Bind Behaviours to touch events
# #####################################################################

# ROUTE TOUCH_LEFT_ARM.touchTime TO WAVE_LEFT_ARM_TIME_SENSOR.startTime
# ROUTE TOUCH_RIGHT_ARM.touchTime TO WAVE_RIGHT_ARM_TIME_SENSOR.startTime
# ROUTE TOUCH_MOUTH.touchTime TO LOOK_FRIENDLY.startTime
# ROUTE TOUCH_NOSE.touchTime TO LOOK_ANGRY.startTime
# ROUTE TOUCH_SKULL.touchTime TO SAY_YES.startTime
# ROUTE TOUCH_HAT.touchTime TO SAY_NO.startTime
# ROUTE TOUCH_RIGHT_LEG.touchTime TO WALK.startTime
# ROUTE TOUCH_LEFT_LEG.touchTime TO JOY.startTime
# ROUTE TOUCH_LEFT_EYE.touchTime TO BLINK_EYES.startTime
# ROUTE TOUCH_RIGHT_EYE.touchTime TO BLINK_EYES.startTime
# ROUTE TOUCH_BODY.touchTime      TO JUMP.startTime

# #####################################################################
# # Bind Idle Time Behaviours to repeating time events
# #####################################################################

# DEF IDLE_1 TimeSensor {
# 	loop TRUE
# 	cycleInterval 10.0
# }
# ROUTE IDLE_1.cycleTime TO BLINK_EYES.startTime

# DEF IDLE_2 TimeSensor {
# 	loop TRUE
# 	cycleInterval 60.0
# }
# ROUTE IDLE_2.cycleTime TO WAVE.startTime

